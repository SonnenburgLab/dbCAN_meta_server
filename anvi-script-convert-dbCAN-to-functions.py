##########################################################
# This script takes the output directory from run_dbcan.py
# and exports a functions file that anvio can import.
# Written by Bryan Merrill
##########################################################
import os
import argparse
import sys
import csv


parser = argparse.ArgumentParser(description='Convert dbCAN outputs to anvio functions file. The default is to export all hits called by >1 tool.')

parser.add_argument('dbCAN_dir', help='This is the output directory generated by run_dbcan.py. Anvi\'o-ready files will be placed here too.')
parser.add_argument('--out_pre', default="", help='Output files prefix that you specified in run_dbcan.py')
parser.add_argument('--export_all', action='store_true', help='Exports ALL of the run_dbcan.py data in several anvi\'o tables. Brace yourself.')

args = parser.parse_args()

dbCAN_dir = args.dbCAN_dir
prefix = args.out_pre

if not dbCAN_dir.endswith("/"):
	dbCAN_dir += "/"
out_path = dbCAN_dir

if not os.path.isdir(dbCAN_dir):
	print(dbCAN_dir + " ERROR: The directory you specified does not exist.")
	exit()

files_and_paths = {}

filelist = ["hmmer","diamond","Hotpep","tf","tp"]
for file in filelist:
	if os.path.isfile(dbCAN_dir+prefix+file+".out"):
		files_and_paths[file] = dbCAN_dir+prefix+file+".out"
if os.path.isfile(dbCAN_dir+prefix+"overview.txt"):
	files_and_paths["overview"] = dbCAN_dir+prefix+"overview.txt"

if len(files_and_paths) < 1:
	print("\nERROR:  Sorry... either your files have a prefix which you forgot to specify, \n\tor there's really nothing here to process. Goodbye.\n\n")
	parser.print_help()
	exit()

# BEGIN PARSING EACH FILE.

if not args.export_all:
	print("Reporting all hits called by >1 tool (of HMMER-dbCAN, DIAMOND-CAZy, Hotpep)...")
	functions_output = open(out_path+"dbcan_functions_default.txt","w")
	f_writer = csv.writer(functions_output, delimiter = "\t")
	functions_header = ["gene_callers_id","source","accession","function","e_value"]
	f_writer.writerow(functions_header)
	
	# Get proteins called by >1 tool (of HMMER-dbCAN, DIAMOND-CAZy, Hotpep)
	genes_to_search = set()
	with open(files_and_paths["overview"],"r") as overview:
		line = overview.readline()
		line = overview.readline()
		while line != "":
			line = line.strip().split()
			if int(line[5]) > 1:
				genes_to_search.add(line[0])
			line = overview.readline()
	overview.close()		
	print("There are "+str(len(genes_to_search))+" hits called by >1 tool...")

	# ... and extract these predictions from each tool.
	with open(files_and_paths["hmmer"],"r") as hmmer:
		line = hmmer.readline()
		line = hmmer.readline()
		while line != "":
			line = line.strip().split()
			gene = str(line[2])
			fn = line[0].replace('.hmm','')
			function = [gene, "dbCAN", fn, fn, str(float(line[4]))]
			if gene in genes_to_search:
				f_writer.writerow(function)
			line = hmmer.readline()
	hmmer.close()

	with open(files_and_paths["diamond"],"r") as diamond:
		line = diamond.readline()
		line = diamond.readline()
		while line != "":
			line = line.strip().split()
			gene = str(line[0])
			acc = line[1].split('|')[0]
			fn = "+".join(line[1].split('|')[1:])
			function = [gene, "CAZy", acc, fn, str(float(line[10]))]
			if gene in genes_to_search:
				f_writer.writerow(function)
			line = diamond.readline()
	diamond.close()

	with open(files_and_paths["Hotpep"],"r") as Hotpep:
		line = Hotpep.readline()
		line = Hotpep.readline()
		while line != "":
			line = line.strip().split()
			gene = str(line[2])
			fn = line[0]
			function = [gene, "Hotpep", fn, fn, str(0)]
			if gene in genes_to_search:
				f_writer.writerow(function)
			line = Hotpep.readline()
	Hotpep.close()

	with open(files_and_paths["tp"],"r") as tp:
		line = tp.readline()
		while line != "":
			line = line.strip().split()
			gene = str(line[0])
			acc = line[1].split('|')[2]
			fn = "TCDB_transporter"
			function = [gene, "TC-DB", acc, fn, str(float(line[10]))]
			f_writer.writerow(function)
			line = tp.readline()
	tp.close()
	print("Done!")


else:
	print("Reporting all hits called by all tools...")
	functions_output = open(out_path+"dbcan_functions_all.txt","w")
	f_writer = csv.writer(functions_output, delimiter = "\t")
	functions_header = ["gene_callers_id","source","accession","function","e_value"]
	f_writer.writerow(functions_header)

	with open(files_and_paths["hmmer"],"r") as hmmer:
		line = hmmer.readline()
		line = hmmer.readline()
		while line != "":
			line = line.strip().split()
			fn = line[0].replace('.hmm','')
			function = [str(line[2]), "dbCAN", fn, fn, str(float(line[4]))]
			f_writer.writerow(function)
			line = hmmer.readline()
	hmmer.close()

	with open(files_and_paths["diamond"],"r") as diamond:
		line = diamond.readline()
		line = diamond.readline()
		while line != "":
			line = line.strip().split()
			acc = line[1].split('|')[0]
			fn = "+".join(line[1].split('|')[1:])
			function = [str(line[0]), "CAZy", acc, fn, str(float(line[10]))]
			f_writer.writerow(function)
			line = diamond.readline()
	diamond.close()

	with open(files_and_paths["Hotpep"],"r") as Hotpep:
		line = Hotpep.readline()
		line = Hotpep.readline()
		while line != "":
			line = line.strip().split()
			fn = line[0]
			function = [str(line[2]), "Hotpep", fn, fn, str(0)]
			f_writer.writerow(function)
			line = Hotpep.readline()
	Hotpep.close()

	with open(files_and_paths["tp"],"r") as tp:
		line = tp.readline()
		while line != "":
			line = line.strip().split()
			acc = line[1].split('|')[2]
			fn = "TCDB_transporter"
			function = [str(line[0]), "TC-DB", acc, fn, str(float(line[10]))]
			f_writer.writerow(function)
			line = tp.readline()
	tp.close()
	print("Done!")