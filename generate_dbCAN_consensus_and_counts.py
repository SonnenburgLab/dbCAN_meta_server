##########################################################
# This script takes the output directory from run_dbcan.py
# and exports a functions file that anvio can import.
# Written by Bryan Merrill
##########################################################
import os
import argparse
import sys
import csv
import re
from collections import Counter


parser = argparse.ArgumentParser(description='Convert dbCAN outputs to consensus annotation and genome-wide counts files. The default is to export all hits called by >1 tool.')

parser.add_argument('dbCAN_dir', help='This is the output directory generated by run_dbcan.py. Newly generated files will be placed here too.')
parser.add_argument('--out_pre', default="", help='Output files prefix that you specified in run_dbcan.py. Last character in prefix should be _')
parser.add_argument('--min_tools', default=2, choices=[1,2,3], type=int, help='Choose the minimum number of tools predicting a CAzyme in a gene in order to export a consensus annotation (and add to genome-wide counts) for that gene. Default = 2')

args = parser.parse_args()

dbCAN_dir = args.dbCAN_dir
prefix = args.out_pre
min_calls = args.min_tools

if not dbCAN_dir.endswith("/"):
	dbCAN_dir += "/"
out_path = dbCAN_dir

if not os.path.isdir(dbCAN_dir):
	print(dbCAN_dir + " ERROR: The directory you specified does not exist.")
	exit()

files_and_paths = {}

if os.path.isfile(dbCAN_dir+prefix+"overview.txt"):
	files_and_paths["overview"] = dbCAN_dir+prefix+"overview.txt"

if len(files_and_paths) < 1:
	print("\nERROR:  Sorry... either your files have a prefix which you forgot to specify, \n\tor there's really nothing here to process. Goodbye.\n\n")
	parser.print_help()
	exit()

# BEGIN PARSING EACH FILE.
infile = open(files_and_paths["overview"],"r")

outfile = open(dbCAN_dir+prefix+"overview_parsed.txt","w")
outfile.write("Gene ID\tdbCAN_function\n")

countfile = open(dbCAN_dir+prefix+"CAzyme_counts.txt","w")
countfile.write("Genome\tCAzyme\tcounts\n")

genome_count = Counter()

line = infile.readline()
line = infile.readline()
while line != "":
    line = line.strip().split("\t")
    gene = line[0]
    hmmer = re.sub(r"\(\d+-\d+\)","",line[1]).split("+")
    diamond = line[2].split("+")
    hotpep = line[3].split("+")
    num_tools = int(line[5])
    
    gene_count = Counter()
    
    if num_tools >= min_calls:
        if hmmer[0] != "N":
            for domain in hmmer:
                gene_count[domain] += 1
                genome_count[domain] += 1

        if diamond[0] != "N":
            for domain in diamond:
                if any(domain in mystring for mystring in list(gene_count.keys())):
                    pass
                else:
                    gene_count[domain] += 1
                    genome_count[domain] += 1

        if hotpep[0] != "N":
            for domain in hotpep:
                if any(domain in mystring for mystring in list(gene_count.keys())):
                    pass
                else:
                    gene_count[domain] += 1
                    genome_count[domain] += 1

        domain_list = []
        for domain in gene_count.keys():
            for num in range(1,gene_count[domain]+1):
                domain_list.append(domain)

        domains = "+".join(domain_list)
        outfile.write(gene+"\t"+domains+"\n")
    line = infile.readline()

genome_name = re.sub("_+$","",prefix)
for domain in genome_count.keys():
    countfile.write(genome_name+"\t"+domain+"\t"+str(genome_count[domain])+"\n")
    
infile.close()
outfile.close()
countfile.close()